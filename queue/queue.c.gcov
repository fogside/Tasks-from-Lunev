        -:    0:Source:queue.c
        -:    0:Graph:queue.gcno
        -:    0:Data:queue.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Queue
        -:    3://
        -:    4:// Created by Евгения Ческидова on 20/02/15.
        -:    5:// Copyright (c) 2015 FOGSIDE. All rights reserved.
        -:    6://
        -:    7:
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <assert.h>
        -:   11:#include "queue.h"
        -:   12:
        -:   13:typedef struct Nod
        -:   14:{
        -:   15:    void *next;
        -:   16:    int data;
        -:   17:} Nod;
        -:   18:
        -:   19:struct Queue
        -:   20:{
        -:   21:    Nod *tail;
        -:   22:    Nod *head;
        -:   23:};
        -:   24:
        -:   25:struct Iterator
        -:   26:{
        -:   27:    Nod *current;
        -:   28:    Nod *head;
        -:   29:};
        -:   30:
        -:   31:Queue *CreateMyQueue()
        -:   32:{
        3:   33:    Queue *queue = malloc(sizeof(Queue));
        3:   34:    if (queue == NULL)
        -:   35:    {
    #####:   36:        perror("Memory allocating mistake");
    #####:   37:        return NULL;
        -:   38:    }
        3:   39:    queue->head = NULL;
        3:   40:    queue->tail = NULL;
        3:   41:    return queue;
        3:   42:}
        -:   43:
        4:   44:int GetHead(Queue *queue)
        -:   45:{
        4:   46:    if(queue==NULL)
        -:   47:    {
        1:   48:        perror("Bad queue pointer");
        1:   49:        return -1;
        -:   50:
        -:   51:    }
        3:   52:    if (queue->head == NULL)
        -:   53:    {
        1:   54:        perror("There's now head");
        1:   55:        return -1;
        -:   56:    }
        2:   57:    return queue->head->data;
        4:   58:}
        -:   59:
        3:   60:int GetTail(Queue *queue)
        -:   61:{
        3:   62:    if(queue==NULL)
        -:   63:    {
        1:   64:        perror("Bad queue pointer");
        1:   65:        return -1;
        -:   66:
        -:   67:    }
        2:   68:    if (queue->tail == NULL)
        -:   69:    {
        1:   70:        perror("There's no tail");
        1:   71:        return -1;
        -:   72:    }
        1:   73:    return queue->tail->data;
        3:   74:}
        -:   75:
        -:   76:
       23:   77:int Enqueue(int data, Queue *queue)
        -:   78:{
       23:   79:    if(queue==NULL)
        -:   80:    {
        1:   81:        perror("Bad queue pointer");
        1:   82:        return -1;
        -:   83:
        -:   84:    }
       22:   85:    Nod *new_nod = malloc(sizeof(Nod));
       22:   86:    new_nod->data = data;
       22:   87:    new_nod->next = NULL;
       22:   88:    if ((queue->head) == NULL)
        -:   89:    {
        2:   90:        queue->head = new_nod;
        2:   91:        queue->tail = new_nod;
        2:   92:    }
        -:   93:    else
        -:   94:    {
       20:   95:        queue->tail->next = new_nod;
       20:   96:        queue->tail = new_nod;
        -:   97:    }
       22:   98:    return 0;
       23:   99:}
        -:  100:
       13:  101:int Dequeue(Queue *queue)
        -:  102:{
       13:  103:    if(queue==NULL)
        -:  104:    {
        1:  105:        perror("Bad queue pointer");
        1:  106:        return -1;
        -:  107:
        -:  108:    }
       12:  109:    if (queue->head == NULL)
        -:  110:    {
        1:  111:        perror("There're no elements left to extract");
        1:  112:        return -1;
        -:  113:
        -:  114:    }
       11:  115:    int data = queue->head->data;
       11:  116:    Nod *tmp = queue->head->next;
       11:  117:    free(queue->head);
       11:  118:    queue->head = tmp;
       11:  119:    return data;
       13:  120:}
        -:  121:
        -:  122:
        4:  123:void DeleteQueue(Queue *queue)
        -:  124:{
        4:  125:    if(queue == NULL)
        -:  126:    {
        1:  127:        perror("Bad queue pointer");
        1:  128:        return;
        -:  129:
        -:  130:    }
        -:  131:    Nod *tmp;
       14:  132:    while (queue->head != NULL)
        -:  133:    {
        -:  134:        tmp = queue->head;
       11:  135:        queue->head = queue->head->next;
       11:  136:        free(tmp);
       11:  137:    }
        3:  138:    free(queue);
        7:  139:}
        -:  140:
        2:  141:int Size(Queue *queue)
        -:  142:{
        2:  143:    if(queue==NULL)
        -:  144:    {
        1:  145:        perror("Bad queue pointer");
        1:  146:        return -1;
        -:  147:
        -:  148:    }
        1:  149:    Iterator *_iter = CreateIterator(queue);
        1:  150:    int count = 0;
        6:  151:    while (IsThereNext(_iter))
        -:  152:    {
        4:  153:        count++;
        4:  154:        GetNext(_iter);
        4:  155:    }
        1:  156:    DeleteIterator(_iter);
        1:  157:    return count;
        2:  158:}
        -:  159:
        3:  160:int isEmpty(Queue *queue)
        -:  161:{
        3:  162:    if(queue==NULL)
        -:  163:    {
        1:  164:        perror("Bad queue pointer");
        1:  165:        return -1;
        -:  166:
        -:  167:    }
        2:  168:    return (queue->head == NULL) ? 1 : 0;
        3:  169:}
        -:  170:
        -:  171:
        -:  172:/**-----------ITERATOR------------**/
        -:  173:
        -:  174:
        -:  175:
        4:  176:Iterator *CreateIterator(Queue *queue)
        -:  177:{
        4:  178:    if(queue==NULL)
        -:  179:    {
        1:  180:        perror("Bad queue pointer");
        1:  181:        return NULL;
        -:  182:
        -:  183:    }
        3:  184:    if(queue->head == NULL)
        -:  185:    {
        1:  186:        perror("Empty queue was given");
        1:  187:        return NULL;
        -:  188:    }
        2:  189:    Iterator *iter = malloc(sizeof(Iterator));
        2:  190:    iter->head = queue->head;
        2:  191:    iter->current = queue->head;
        2:  192:    return iter;
        4:  193:}
        -:  194:
       34:  195:int IsThereNext(Iterator *iter)
        -:  196:{
       34:  197:    if(iter==NULL)
        -:  198:    {
        1:  199:        perror("Bad iter pointer");
        1:  200:        return -1;
        -:  201:
        -:  202:    }
       33:  203:    if(iter->current->next == NULL)
        2:  204:        return 0;
       31:  205:    return 1;
       34:  206:}
        -:  207:
        -:  208:
        2:  209:int GetCurrent(Iterator *iter)
        -:  210:{
        2:  211:    if(iter==NULL)
        -:  212:    {
        1:  213:        perror("Bad iter pointer");
        1:  214:        return -1;
        -:  215:    }
        1:  216:    return iter->current->data;
        2:  217:}
        -:  218:
        -:  219:
       19:  220:int GetNext(Iterator *iter)
        -:  221:{
       19:  222:    if(iter==NULL)
        -:  223:    {
        1:  224:        perror("Bad iter pointer");
        1:  225:        return -1;
        -:  226:    }
       18:  227:    assert(IsThereNext(iter));
       18:  228:    iter->current = iter->current->next;
       18:  229:    return iter->current->data;
       19:  230:}
        -:  231:
        3:  232:void DeleteIterator(Iterator *iter)
        -:  233:{
        3:  234:    if(iter==NULL)
        -:  235:    {
        1:  236:        perror("Bad *iter pointer");
        1:  237:        return;
        -:  238:    }
        2:  239:    free(iter);
        5:  240:}
        -:  241:
        2:  242:int RestartIter(Iterator *iter)
        -:  243:{
        2:  244:    if(iter==NULL)
        -:  245:    {
        1:  246:        perror("Bad iter pointer");
        1:  247:        return -1;
        -:  248:    }
        1:  249:    iter->current = iter->head;
        1:  250:    return 0;
        2:  251:}
