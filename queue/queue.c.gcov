        -:    0:Source:queue.c
        -:    0:Graph:queue.gcno
        -:    0:Data:queue.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Queue
        -:    3://
        -:    4:// Created by Евгения Ческидова on 20/02/15.
        -:    5:// Copyright (c) 2015 FOGSIDE. All rights reserved.
        -:    6://
        -:    7:
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <assert.h>
        -:   11:#include <string.h>
        -:   12:#include "queue.h"
        -:   13:
        -:   14:typedef struct Nod
        -:   15:{
        -:   16:    void *next;
        -:   17:    int data;
        -:   18:} Nod;
        -:   19:
        -:   20:struct Queue
        -:   21:{
        -:   22:    Nod *tail;
        -:   23:    Nod *head;
        -:   24:};
        -:   25:
        -:   26:struct Iterator
        -:   27:{
        -:   28:    Nod *current;
        -:   29:    Nod *head;
        -:   30:};
        -:   31:
        -:   32:Queue *CreateMyQueue()
        -:   33:{
        3:   34:    Queue *queue = malloc(sizeof(Queue));
        3:   35:    if (queue == NULL)
        -:   36:    {
    #####:   37:        perror("Memory allocating mistake");
    #####:   38:        return NULL;
        -:   39:    }
        3:   40:    queue->head = NULL;
        3:   41:    queue->tail = NULL;
        3:   42:    return queue;
        3:   43:}
        -:   44:
        4:   45:int GetHead(Queue *queue)
        -:   46:{
        4:   47:    if(queue==NULL)
        -:   48:    {
        1:   49:        perror("Bad queue pointer");
        1:   50:        return -1;
        -:   51:
        -:   52:    }
        3:   53:    if (queue->head == NULL)
        -:   54:    {
        1:   55:        perror("There's now head");
        1:   56:        return -1;
        -:   57:    }
        2:   58:    return queue->head->data;
        4:   59:}
        -:   60:
        3:   61:int GetTail(Queue *queue)
        -:   62:{
        3:   63:    if(queue==NULL)
        -:   64:    {
        1:   65:        perror("Bad queue pointer");
        1:   66:        return -1;
        -:   67:
        -:   68:    }
        2:   69:    if (queue->tail == NULL)
        -:   70:    {
        1:   71:        perror("There's no tail");
        1:   72:        return -1;
        -:   73:    }
        1:   74:    return queue->tail->data;
        3:   75:}
        -:   76:
        -:   77:
       23:   78:int Enqueue(int data, Queue *queue)
        -:   79:{
       23:   80:    if(queue==NULL)
        -:   81:    {
        1:   82:        perror("Bad queue pointer");
        1:   83:        return -1;
        -:   84:
        -:   85:    }
       22:   86:    Nod *new_nod = malloc(sizeof(Nod));
       22:   87:    new_nod->data = data;
       22:   88:    new_nod->next = NULL;
       22:   89:    if ((queue->head) == NULL)
        -:   90:    {
        2:   91:        queue->head = new_nod;
        2:   92:        queue->tail = new_nod;
        2:   93:    }
        -:   94:    else
        -:   95:    {
       20:   96:        queue->tail->next = new_nod;
       20:   97:        queue->tail = new_nod;
        -:   98:    }
       22:   99:    return 0;
       23:  100:}
        -:  101:
       13:  102:int Dequeue(Queue *queue)
        -:  103:{
       13:  104:    if(queue==NULL)
        -:  105:    {
        1:  106:        perror("Bad queue pointer");
        1:  107:        return -1;
        -:  108:
        -:  109:    }
       12:  110:    if (queue->head == NULL)
        -:  111:    {
        1:  112:        perror("There're no elements left to extract");
        1:  113:        return -1;
        -:  114:
        -:  115:    }
       11:  116:    int data = queue->head->data;
       11:  117:    queue->head = queue->head->next;
       11:  118:    return data;
       13:  119:}
        -:  120:
        -:  121:
        3:  122:void DeleteQueue(Queue **queue)
        -:  123:{
        5:  124:    if((queue == NULL)||(*queue==NULL))
        -:  125:    {
        1:  126:        perror("Bad queue pointer");
        1:  127:        return;
        -:  128:
        -:  129:    }
        -:  130:    Nod *tmp;
       13:  131:    while ((*queue)->head != NULL)
        -:  132:    {
        -:  133:        tmp = (*queue)->head;
       11:  134:        (*queue)->head = (*queue)->head->next;
       11:  135:        free(tmp);
       11:  136:    }
        2:  137:    free(*queue);
        2:  138:    *queue = NULL;
        5:  139:}
        -:  140:
        2:  141:int Size(Queue *queue)
        -:  142:{
        2:  143:    if(queue==NULL)
        -:  144:    {
        1:  145:        perror("Bad queue pointer");
        1:  146:        return -1;
        -:  147:
        -:  148:    }
        1:  149:    Iterator *iter = CreateIterator(queue);
        1:  150:    int count = 0;
        6:  151:    while (IsThereNext(iter))
        -:  152:    {
        4:  153:        count++;
        4:  154:        GetNext(iter);
        4:  155:    }
        1:  156:    return count;
        2:  157:}
        -:  158:
        3:  159:int isEmpty(Queue *queue)
        -:  160:{
        3:  161:    if(queue==NULL)
        -:  162:    {
        1:  163:        perror("Bad queue pointer");
        1:  164:        return -1;
        -:  165:
        -:  166:    }
        2:  167:    return (queue->head == NULL) ? 1 : 0;
        3:  168:}
        -:  169:
        -:  170:
        -:  171:/**-----------ITERATOR------------**/
        -:  172:
        -:  173:
        -:  174:
        4:  175:Iterator *CreateIterator(Queue *queue)
        -:  176:{
        4:  177:    if(queue==NULL)
        -:  178:    {
        1:  179:        perror("Bad queue pointer");
        1:  180:        return NULL;
        -:  181:
        -:  182:    }
        3:  183:    if(queue->head == NULL)
        -:  184:    {
        1:  185:        perror("Empty queue was given");
        1:  186:        return NULL;
        -:  187:    }
        2:  188:    Iterator *iter = malloc(sizeof(Iterator));
        2:  189:    iter->head = queue->head;
        2:  190:    iter->current = queue->head;
        2:  191:    return iter;
        4:  192:}
        -:  193:
       35:  194:int IsThereNext(Iterator *iter)
        -:  195:{
       35:  196:    if(iter==NULL)
        -:  197:    {
        1:  198:        perror("Bad iter pointer");
        1:  199:        return -1;
        -:  200:
        -:  201:    }
       34:  202:    if(iter->current->next == NULL)
        2:  203:        return 0;
       32:  204:    return 1;
       35:  205:}
        -:  206:
        -:  207:
        2:  208:int GetCurrent(Iterator *iter)
        -:  209:{
        2:  210:    if(iter==NULL)
        -:  211:    {
        1:  212:        perror("Bad iter pointer");
        1:  213:        return -1;
        -:  214:    }
        1:  215:    return iter->current->data;
        2:  216:}
        -:  217:
        -:  218:
       20:  219:int GetNext(Iterator *iter)
        -:  220:{
       20:  221:    if(iter==NULL)
        -:  222:    {
        1:  223:        perror("Bad iter pointer");
        1:  224:        return -1;
        -:  225:    }
       19:  226:    assert(IsThereNext(iter));
       19:  227:    iter->current = iter->current->next;
       19:  228:    return iter->current->data;
       20:  229:}
        -:  230:
        2:  231:void DeleteIterator(Iterator **iter)
        -:  232:{
        3:  233:    if((iter==NULL)||(*iter == NULL))
        -:  234:    {
        1:  235:        perror("Bad *iter pointer");
        1:  236:        return;
        -:  237:    }
        1:  238:    free(*iter);
        1:  239:    *iter = NULL;
        -:  240:
        3:  241:}
        -:  242:
        2:  243:int RestartIter(Iterator *iter)
        -:  244:{
        2:  245:    if(iter==NULL)
        -:  246:    {
        1:  247:        perror("Bad iter pointer");
        1:  248:        return -1;
        -:  249:    }
        1:  250:    iter->current = iter->head;
        1:  251:    return 0;
        2:  252:}
